// Script de lancement imm√©diat pour les extractions autonomes
// √Ä ex√©cuter dans la console du navigateur

console.log('üöÄ SYST√àME D\'EXTRACTION AUTONOME UNESS');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log('üìä Pr√™t √† extraire toutes les donn√©es UNESS');
console.log('‚ö° Mode: COMPL√àTEMENT AUTONOME');
console.log('');

// Import dynamique du script d'extraction
import('/src/scripts/auto-complete-extraction.ts').then(module => {
  console.log('‚úÖ Module d\'extraction charg√©');
  console.log('üéØ Lancement automatique en cours...');
}).catch(error => {
  console.error('‚ùå Erreur chargement module:', error);
  
  // Fallback: lancement direct via Supabase
  console.log('üîÑ Fallback: Lancement direct...');
  launchDirectExtraction();
});

// Fonction de fallback
async function launchDirectExtraction() {
  // ‚ö†Ô∏è CL√âS DE TEST UNIQUEMENT - √Ä remplacer par les vraies cl√©s en production
  const supabaseUrl = 'https://sandbox-test.supabase.co';
  const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.TEST_KEY_DEV_SANDBOX_ONLY';
  
  const extractionTypes = [
    {
      type: 'edn',
      name: 'üìö EDN (Items de connaissance)',
      config: { batch_size: 50, max_concurrent: 6 }
    },
    {
      type: 'oic', 
      name: 'üéØ OIC (4,872 comp√©tences)',
      config: { batch_size: 100, max_concurrent: 10 }
    },
    {
      type: 'ecos',
      name: 'üè• ECOS (Situations cliniques)', 
      config: { batch_size: 30, max_concurrent: 5 }
    }
  ];
  
  console.log('üöÄ Lancement de toutes les extractions...');
  
  for (const extraction of extractionTypes) {
    try {
      console.log(`\n${extraction.name}`);
      console.log('‚îÄ'.repeat(40));
      
      const response = await fetch(`${supabaseUrl}/functions/v1/extract-uness-enhanced`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${supabaseKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          action: 'start',
          extraction_type: extraction.type,
          ...extraction.config
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        console.log(`‚úÖ ${extraction.type.toUpperCase()} lanc√©`);
        console.log(`üìä Session: ${result.session_id}`);
        console.log(`‚öôÔ∏è Config: ${extraction.config.batch_size} batch, ${extraction.config.max_concurrent} parall√®le`);
      } else {
        console.error(`‚ùå Erreur ${extraction.type.toUpperCase()}:`, result);
      }
      
      // Pause entre les lancements
      await new Promise(resolve => setTimeout(resolve, 5000));
      
    } catch (error) {
      console.error(`üí• Erreur critique ${extraction.type.toUpperCase()}:`, error);
    }
  }
  
  console.log('\nüéâ TOUTES LES EXTRACTIONS LANC√âES!');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('üìä Les processus continuent en arri√®re-plan');
  console.log('üîç V√©rifiez les logs Supabase pour le suivi');
}

// Auto-lancement apr√®s 2 secondes
setTimeout(() => {
  console.log('‚è∞ Auto-lancement activ√©...');
}, 2000);