// Test et lancement de l'extraction OIC
// Utilise les credentials fournis pour extraire les 4,872 comp√©tences

async function testOICExtraction() {
  const baseUrl = 'https://yaincoxihiqdksxgrsrk.supabase.co/functions/v1/extract-edn-objectifs';
  const anonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlhaW5jb3hpaGlxZGtzeGdyc3JrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI4MTE4MjcsImV4cCI6MjA1ODM4NzgyN30.HBfwymB2F9VBvb3uyeTtHBMZFZYXzL0wQmS5fqd65yU';
  
  const headers = {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${anonKey}`
  };

  console.log('üß™ √âTAPE 1: Test d\'insertion des donn√©es...');
  
  // 1. Test d'insertion
  try {
    const testResponse = await fetch(baseUrl, {
      method: 'POST',
      headers,
      body: JSON.stringify({ action: 'insert_test_data' })
    });
    
    const testResult = await testResponse.json();
    console.log('‚úÖ Test d\'insertion:', testResult);
    
    if (!testResult.success) {
      console.error('‚ùå Test d\'insertion √©chou√©:', testResult);
      return;
    }
  } catch (error) {
    console.error('‚ùå Erreur test insertion:', error);
    return;
  }

  console.log('\nüöÄ √âTAPE 2: Lancement de l\'extraction compl√®te...');
  
  // 2. Lancer l'extraction compl√®te
  try {
    const extractionResponse = await fetch(baseUrl, {
      method: 'POST',
      headers,
      body: JSON.stringify({ action: 'start' })
    });
    
    const extractionResult = await extractionResponse.json();
    console.log('üéØ Extraction lanc√©e:', extractionResult);
    
    if (extractionResult.session_id) {
      console.log(`üìä Session ID: ${extractionResult.session_id}`);
      console.log('‚è∞ Monitoring du progr√®s...');
      
      // 3. Monitor le progr√®s
      await monitorProgress(baseUrl, headers, extractionResult.session_id);
    }
  } catch (error) {
    console.error('‚ùå Erreur lancement extraction:', error);
  }
}

async function monitorProgress(baseUrl, headers, sessionId) {
  let attempts = 0;
  const maxAttempts = 60; // 30 minutes max
  
  while (attempts < maxAttempts) {
    try {
      const statusResponse = await fetch(baseUrl, {
        method: 'POST',
        headers,
        body: JSON.stringify({ 
          action: 'status', 
          session_id: sessionId 
        })
      });
      
      const status = await statusResponse.json();
      console.log(`üìà Progr√®s [${new Date().toLocaleTimeString()}]:`, {
        status: status.status,
        items_extracted: status.items_extracted,
        page_number: status.page_number,
        total_expected: status.total_expected
      });
      
      if (status.status === 'termine') {
        console.log('üéâ EXTRACTION TERMIN√âE !');
        await generateFinalReport(baseUrl, headers);
        break;
      } else if (status.status === 'erreur') {
        console.error('‚ùå ERREUR LORS DE L\'EXTRACTION:', status.error_message);
        break;
      }
      
      // Attendre 30 secondes avant le prochain check
      await new Promise(resolve => setTimeout(resolve, 30000));
      attempts++;
      
    } catch (error) {
      console.error('‚ùå Erreur monitoring:', error);
      attempts++;
    }
  }
}

async function generateFinalReport(baseUrl, headers) {
  console.log('\nüìä G√âN√âRATION DU RAPPORT FINAL...');
  
  try {
    const reportResponse = await fetch(baseUrl, {
      method: 'POST',
      headers,
      body: JSON.stringify({ action: 'rapport' })
    });
    
    const report = await reportResponse.json();
    
    console.log('\nüéØ RAPPORT FINAL D\'EXTRACTION OIC');
    console.log('==========================================');
    console.log(`‚úÖ Comp√©tences extraites: ${report.total_competences_extraites}`);
    console.log(`üéØ Comp√©tences attendues: ${report.total_competences_attendues}`);
    console.log(`üìà Completude globale: ${report.completude_globale}%`);
    console.log(`üìö Items EDN couverts: ${report.items_ern_couverts}`);
    
    // V√©rification finale dans la base
    console.log('\nüîç V√âRIFICATION FINALE...');
    // Cette partie serait faite par une requ√™te SQL s√©par√©e
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration rapport:', error);
  }
}

// Lancer l'extraction
console.log('üöÄ LANCEMENT DE L\'EXTRACTION OIC - 4,872 COMP√âTENCES');
console.log('=====================================================');
testOICExtraction().catch(error => {
  console.error('üí• Erreur fatale:', error);
});