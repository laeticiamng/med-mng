
import { MAX_ATTEMPTS, WAIT_TIME, FAST_POLLING_INTERVAL, ULTRA_FAST_POLLING_INTERVAL, MAX_ULTRA_FAST_ATTEMPTS } from './constants.ts';
import { SunoApiClient } from './sunoClient.ts';

interface AudioResult {
  audioUrl?: string;
  timeout: boolean;
  attempts: number;
}

export async function waitForAudio(sunoClient: SunoApiClient, taskId: string): Promise<AudioResult> {
  console.log(`üéµ D√©marrage attente audio ULTRA-OPTIMIS√âE pour taskId: ${taskId}`);
  
  for (let attempt = 1; attempt <= MAX_ATTEMPTS; attempt++) {
    try {
      // Calcul du d√©lai d'attente optimis√©
      let waitTime = WAIT_TIME;
      if (attempt <= MAX_ULTRA_FAST_ATTEMPTS) {
        waitTime = ULTRA_FAST_POLLING_INTERVAL; // 1 seconde pour les premi√®res tentatives
        console.log(`üîÑ ULTRA-RAPIDE ‚ö° Tentative ${attempt}/${MAX_ULTRA_FAST_ATTEMPTS} (${Math.round(attempt/MAX_ULTRA_FAST_ATTEMPTS*100)}%) - Interval: ${waitTime}ms`);
      } else {
        waitTime = FAST_POLLING_INTERVAL; // 2 secondes apr√®s
        console.log(`üîÑ RAPIDE ‚ö° Tentative ${attempt}/${MAX_ATTEMPTS} (${Math.round(attempt/MAX_ATTEMPTS*100)}%) - Interval: ${waitTime}ms`);
      }

      // Attendre avant la prochaine tentative (sauf la premi√®re)
      if (attempt > 1) {
        console.log(`‚è≥ ${attempt <= MAX_ULTRA_FAST_ATTEMPTS ? 'ULTRA-RAPIDE' : 'RAPIDE'} ‚ö° Attente de ${waitTime}ms avant prochaine tentative...`);
        await new Promise(resolve => setTimeout(resolve, waitTime));
      }

      console.log(`üåê GET https://apibox.erweima.ai/api/v1/generate/record-info?taskId=${taskId}`);
      
      const statusResponse = await sunoClient.get(`https://apibox.erweima.ai/api/v1/generate/record-info?taskId=${taskId}`);
      
      console.log(`üìä Status: ${statusResponse ? 'R√©ponse re√ßue' : 'Pas de r√©ponse'}`);
      console.log(`‚úÖ GET Response:`, statusResponse);
      console.log(`üì• R√©ponse statut tentative ${attempt}:`, statusResponse);

      if (!statusResponse || !statusResponse.data) {
        console.error(`‚ùå Pas de donn√©es dans la r√©ponse, tentative ${attempt}`);
        continue;
      }

      const status = statusResponse.data.status;
      console.log(`üìä Statut: ${status}`);

      if (status === 'SUCCESS' || status === 'COMPLETE') {
        console.log(`‚úÖ G√âN√âRATION TERMIN√âE apr√®s ${attempt} tentatives !`);
        
        if (statusResponse.data.response && statusResponse.data.response.length > 0) {
          const audioUrl = statusResponse.data.response[0]?.audio_url || statusResponse.data.response[0]?.audioUrl;
          
          if (audioUrl) {
            console.log(`üéß URL AUDIO TROUV√âE: ${audioUrl}`);
            return { audioUrl, timeout: false, attempts: attempt };
          } else {
            console.error(`‚ùå URL audio manquante dans la r√©ponse SUCCESS`);
          }
        } else {
          console.error(`‚ùå R√©ponse SUCCESS mais pas de donn√©es audio`);
        }
      } else if (status === 'FAILED' || status === 'ERROR') {
        console.error(`‚ùå G√©n√©ration √©chou√©e avec statut: ${status}`);
        throw new Error(`G√©n√©ration Suno √©chou√©e: ${status}`);
      } else if (status === 'PENDING' || status === 'PROCESSING' || status === 'IN_PROGRESS') {
        console.log(`‚è≥ G√©n√©ration en cours... (${status})`);
        // Continue la boucle
      } else {
        console.warn(`‚ö†Ô∏è Statut inconnu: ${status}, on continue...`);
      }

    } catch (error) {
      console.error(`‚ùå Erreur tentative ${attempt}:`, error);
      
      // Si c'est une erreur de r√©seau, on continue
      if (error.message?.includes('fetch') || error.message?.includes('network')) {
        console.log(`üîÑ Erreur r√©seau, nouvelle tentative dans ${waitTime}ms...`);
        continue;
      }
      
      // Pour les autres erreurs, on les propage apr√®s quelques tentatives
      if (attempt >= 3) {
        throw error;
      }
    }
  }

  console.log(`‚è∞ Timeout apr√®s ${MAX_ATTEMPTS} tentatives optimis√©es`);
  return { timeout: true, attempts: MAX_ATTEMPTS };
}
