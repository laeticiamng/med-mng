import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const { prompt, format, item_code, content_type } = await req.json()

    const openAIApiKey = Deno.env.get('OPENAI_API_KEY')
    if (!openAIApiKey) {
      throw new Error('OpenAI API key not configured')
    }

    console.log(`üéØ G√©n√©ration de contenu ${content_type} pour ${item_code}`)
    
    // Configuration selon le type de contenu
    const systemPrompt = getSystemPrompt(content_type)
    const maxTokens = getMaxTokens(content_type)

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: prompt }
        ],
        max_tokens: maxTokens,
        temperature: 0.8,
      }),
    })

    if (!response.ok) {
      const error = await response.text()
      console.error('Erreur OpenAI:', error)
      throw new Error(`OpenAI API error: ${response.status}`)
    }

    const data = await response.json()
    const generatedContent = data.choices[0].message.content

    console.log(`‚úÖ Contenu ${content_type} g√©n√©r√© avec succ√®s`)

    return new Response(
      JSON.stringify({ 
        content: generatedContent,
        format: content_type,
        item_code,
        status: 'success'
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )

  } catch (error) {
    console.error('Erreur g√©n√©ration contenu:', error)
    return new Response(
      JSON.stringify({ 
        error: error.message,
        status: 'error'
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500
      }
    )
  }
})

function getSystemPrompt(contentType: string): string {
  switch (contentType) {
    case 'novel':
      return `Tu es un √©crivain m√©dical sp√©cialis√© dans la cr√©ation de romans p√©dagogiques. 
      Cr√©e des r√©cits captivants qui int√®grent naturellement les connaissances m√©dicales.
      Style: narratif, accessible, avec des personnages d√©velopp√©s et des situations r√©alistes.
      Structure: introduction engageante, d√©veloppement progressif, r√©solution √©ducative.`

    case 'podcast':
      return `Tu es un cr√©ateur de contenu audio m√©dical sp√©cialis√© dans les podcasts √©ducatifs.
      Cr√©e des scripts de podcast avec un dialogue naturel entre experts m√©dicaux.
      Format: conversation p√©dagogique, exemples concrets, transitions fluides.
      Inclus: [INTRO], [SEGMENT 1], [SEGMENT 2], [CONCLUSION] avec indications audio.`

    case 'video':
      return `Tu es un scriptwriter pour contenu vid√©o m√©dical √©ducatif.
      Cr√©e des scripts d√©taill√©s avec indications visuelles et narratives.
      Format: s√©quences courtes, visuels d√©crits, rythme dynamique.
      Inclus: [PLAN], [VISUEL], [NARRATION] pour chaque s√©quence.`

    case 'infographic':
      return `Tu es un concepteur d'infographies m√©dicales p√©dagogiques.
      Cr√©e des descriptions d√©taill√©es d'infographies visuelles et informatives.
      Format: structure claire, hi√©rarchie visuelle, donn√©es synth√©tiques.
      Inclus: titre principal, sous-sections, √©l√©ments visuels, statistiques cl√©s.`

    default:
      return `Tu es un expert en p√©dagogie m√©dicale. Adapte le contenu m√©dical 
      fourni dans un format accessible et p√©dagogique selon les meilleures pratiques √©ducatives.`
  }
}

function getMaxTokens(contentType: string): number {
  switch (contentType) {
    case 'novel':
      return 3000  // Roman plus long
    case 'podcast':
      return 2500  // Script d√©taill√©
    case 'video':
      return 2000  // Script avec indications
    case 'infographic':
      return 1500  // Description concise
    default:
      return 2000
  }
}