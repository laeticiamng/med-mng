import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { supabase } from '@/integrations/supabase/client';
import { AlertTriangle, CheckCircle, Database, Loader2, Play, Search } from 'lucide-react';

interface AnalysisResult {
  analysis: {
    totalCompetences: number;
    emptyDescriptions: number;
    tooShortDescriptions: number;
    htmlEntitiesCorrupted: number;
    fragmentsIncomplete: number;
    intitulesCorrupted: number;
    wikitablesDetected: number;
    samples: any;
  };
  percentages: {
    emptyDescriptions: string;
    tooShortDescriptions: string;
    htmlEntitiesCorrupted: string;
    fragmentsIncomplete: string;
    intitulesCorrupted: string;
    wikitablesDetected: string;
  };
  totalProblems: number;
  healthScore: string;
}

interface FixResult {
  report: {
    totalProcessed: number;
    htmlEntitiesFixed: number;
    fragmentsReconstructed: number;
    emptyDescriptionsHandled: number;
    wikitablesCleaned: number;
    intitulesFixed: number;
    errors: string[];
    samples: any[];
  };
  totalFixed: number;
  successRate: string;
}

const OicDataQualityManager = () => {
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [isFixing, setIsFixing] = useState(false);
  const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null);
  const [fixResult, setFixResult] = useState<FixResult | null>(null);
  const [error, setError] = useState<string | null>(null);

  const runAnalysis = async () => {
    setIsAnalyzing(true);
    setError(null);
    
    try {
      console.log('üîç Starting OIC data quality analysis...');
      
      const { data, error } = await supabase.functions.invoke('fix-oic-data-quality', {
        body: { action: 'analyze' }
      });
      
      if (error) throw error;
      
      setAnalysisResult(data);
      console.log('‚úÖ Analysis completed:', data);
      
    } catch (err: any) {
      console.error('‚ùå Analysis failed:', err);
      setError(`Analysis failed: ${err.message}`);
    } finally {
      setIsAnalyzing(false);
    }
  };

  const runFixes = async () => {
    setIsFixing(true);
    setError(null);
    
    try {
      console.log('üõ†Ô∏è Starting OIC data quality fixes...');
      
      const { data, error } = await supabase.functions.invoke('fix-oic-data-quality', {
        body: { action: 'fix' }
      });
      
      if (error) throw error;
      
      setFixResult(data);
      console.log('‚úÖ Fixes completed:', data);
      
      // Relancer l'analyse pour voir les am√©liorations
      setTimeout(() => {
        runAnalysis();
      }, 1000);
      
    } catch (err: any) {
      console.error('‚ùå Fix failed:', err);
      setError(`Fix failed: ${err.message}`);
    } finally {
      setIsFixing(false);
    }
  };

  const getHealthScoreColor = (score: string) => {
    const numScore = parseFloat(score);
    if (numScore >= 80) return 'text-green-600';
    if (numScore >= 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  return (
    <div className="container mx-auto px-4 py-8 space-y-6">
      <div className="text-center space-y-4">
        <h1 className="text-3xl font-bold text-foreground flex items-center justify-center gap-2">
          <Database className="h-8 w-8 text-primary" />
          Gestionnaire de Qualit√© des Donn√©es OIC
        </h1>
        <p className="text-muted-foreground max-w-2xl mx-auto">
          Analysez et corrigez automatiquement les probl√®mes de qualit√© des comp√©tences OIC extraites de la base de donn√©es.
          Ce syst√®me d√©tecte et r√©pare les balises HTML corrompues, les fragments incomplets, et les descriptions manquantes.
        </p>
      </div>

      {error && (
        <Alert variant="destructive">
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Panel d'analyse */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Search className="h-5 w-5" />
              Analyse de Qualit√©
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <Button 
              onClick={runAnalysis} 
              disabled={isAnalyzing}
              className="w-full"
              variant="outline"
            >
              {isAnalyzing ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  Analyse en cours...
                </>
              ) : (
                <>
                  <Search className="h-4 w-4 mr-2" />
                  Analyser les Donn√©es OIC
                </>
              )}
            </Button>

            {analysisResult && (
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <span className="font-medium">Score de Sant√©</span>
                  <span className={`text-2xl font-bold ${getHealthScoreColor(analysisResult.healthScore)}`}>
                    {analysisResult.healthScore}%
                  </span>
                </div>
                
                <div className="text-sm text-muted-foreground">
                  {analysisResult.analysis.totalCompetences} comp√©tences analys√©es
                </div>
                
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span>Descriptions vides</span>
                    <Badge variant={analysisResult.analysis.emptyDescriptions > 0 ? "destructive" : "secondary"}>
                      {analysisResult.analysis.emptyDescriptions} ({analysisResult.percentages.emptyDescriptions}%)
                    </Badge>
                  </div>
                  <div className="flex justify-between">
                    <span>HTML corrompu</span>
                    <Badge variant={analysisResult.analysis.htmlEntitiesCorrupted > 0 ? "destructive" : "secondary"}>
                      {analysisResult.analysis.htmlEntitiesCorrupted} ({analysisResult.percentages.htmlEntitiesCorrupted}%)
                    </Badge>
                  </div>
                  <div className="flex justify-between">
                    <span>Fragments incomplets</span>
                    <Badge variant={analysisResult.analysis.fragmentsIncomplete > 0 ? "destructive" : "secondary"}>
                      {analysisResult.analysis.fragmentsIncomplete} ({analysisResult.percentages.fragmentsIncomplete}%)
                    </Badge>
                  </div>
                  <div className="flex justify-between">
                    <span>Intitul√©s corrompus</span>
                    <Badge variant={analysisResult.analysis.intitulesCorrupted > 0 ? "destructive" : "secondary"}>
                      {analysisResult.analysis.intitulesCorrupted} ({analysisResult.percentages.intitulesCorrupted}%)
                    </Badge>
                  </div>
                </div>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Panel de correction */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Play className="h-5 w-5" />
              Correction Automatique
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <Button 
              onClick={runFixes} 
              disabled={isFixing || !analysisResult}
              className="w-full"
              variant="default"
            >
              {isFixing ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  Correction en cours...
                </>
              ) : (
                <>
                  <Play className="h-4 w-4 mr-2" />
                  Lancer les Corrections
                </>
              )}
            </Button>

            {!analysisResult && (
              <p className="text-sm text-muted-foreground">
                Lancez d'abord une analyse pour activer les corrections.
              </p>
            )}

            {fixResult && (
              <div className="space-y-3">
                <div className="flex items-center gap-2">
                  <CheckCircle className="h-4 w-4 text-green-600" />
                  <span className="font-medium">Corrections Termin√©es</span>
                </div>
                
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span>Total trait√©</span>
                    <Badge variant="secondary">{fixResult.report.totalProcessed}</Badge>
                  </div>
                  <div className="flex justify-between">
                    <span>Total corrig√©</span>
                    <Badge variant="default">{fixResult.totalFixed}</Badge>
                  </div>
                  <div className="flex justify-between">
                    <span>Taux de succ√®s</span>
                    <Badge variant="default">{fixResult.successRate}%</Badge>
                  </div>
                </div>
                
                <div className="space-y-1 text-sm">
                  <div>üîß HTML nettoy√©: {fixResult.report.htmlEntitiesFixed}</div>
                  <div>üìù Fragments reconstruits: {fixResult.report.fragmentsReconstructed}</div>
                  <div>‚ùå Descriptions cr√©√©es: {fixResult.report.emptyDescriptionsHandled}</div>
                  <div>üìã Tables nettoy√©es: {fixResult.report.wikitablesCleaned}</div>
                  <div>üí• Intitul√©s corrig√©s: {fixResult.report.intitulesFixed}</div>
                </div>

                {fixResult.report.errors.length > 0 && (
                  <div className="text-sm text-red-600">
                    ‚ö†Ô∏è {fixResult.report.errors.length} erreurs d√©tect√©es
                  </div>
                )}
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Instructions */}
      <Card>
        <CardHeader>
          <CardTitle>Instructions d'utilisation</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3 text-sm">
          <div>
            <strong>1. Analyse :</strong> Scanne toutes les comp√©tences OIC pour identifier les probl√®mes de qualit√© des donn√©es.
          </div>
          <div>
            <strong>2. Correction :</strong> Applique automatiquement des corrections pour r√©soudre :
            <ul className="list-disc list-inside ml-4 mt-1 space-y-1">
              <li>Entit√©s HTML corrompues (&amp;lt;, &amp;gt;, &amp;nbsp;)</li>
              <li>Fragments de texte incomplets</li>
              <li>Descriptions vides ou manquantes</li>
              <li>Tables MediaWiki non converties</li>
              <li>Intitul√©s avec balises corrompues</li>
            </ul>
          </div>
          <div>
            <strong>3. Re-analyse :</strong> Apr√®s correction, une nouvelle analyse est automatiquement lanc√©e pour mesurer l'am√©lioration.
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default OicDataQualityManager;