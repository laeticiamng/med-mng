
import { supabase } from '@/integrations/supabase/client';

// Connaissances attendues selon E-LiSA officiel
const EXPECTED_IC2_RANG_A = [
  'Identifier les professionnels, comp√©tences et ressources li√©s √† un r√¥le particulier dans une organisation de sant√©',
  'Conna√Ætre la d√©finition de la pratique m√©dicale et conna√Ætre la signification de l\'√©thique',
  'Conna√Ætre les d√©finitions de normes et de valeurs professionnelles',
  'Conna√Ætre l\'organisation sociale et politique de la profession m√©dicale et sa r√©gulation √©tatique',
  'Conna√Ætre les principes de la m√©decine fond√©e sur les preuves et de la m√©decine bas√©e sur la responsabilit√© et l\'exp√©rience du malade',
  'Conna√Ætre les principes de d√©ontologie m√©dicale, conna√Ætre la notion de conflit de valeurs et de conflit d\'int√©r√™ts'
];

const EXPECTED_IC2_RANG_B = [
  'Conna√Ætre l\'organisation de l\'exercice des professionnels de sant√© en France et leurs statuts',
  'Conna√Ætre le r√¥le des ordres professionnels',
  'Conna√Ætre les diff√©rents acteurs de la sant√© et leurs interactions'
];

// Fonction pour analyser le contenu et d√©tecter les concepts pr√©sents
function analyzeContentForConcepts(content: any, expectedConcepts: string[]): { found: string[], missing: string[] } {
  const found: string[] = [];
  const missing: string[] = [];
  
  const contentStr = JSON.stringify(content).toLowerCase();
  
  expectedConcepts.forEach(concept => {
    const keywords = extractKeywords(concept);
    const isPresent = keywords.some(keyword => contentStr.includes(keyword.toLowerCase()));
    
    if (isPresent) {
      found.push(concept);
    } else {
      missing.push(concept);
    }
  });
  
  return { found, missing };
}

// Extraire les mots-cl√©s principaux d'un concept
function extractKeywords(concept: string): string[] {
  const keywordMap: { [key: string]: string[] } = {
    'Identifier les professionnels': ['professionnels', 'comp√©tences', 'ressources', 'organisation', 'sant√©', 'acteurs'],
    'd√©finition de la pratique m√©dicale': ['pratique m√©dicale', '√©thique', 'd√©finition', 'm√©decine'],
    'normes et de valeurs professionnelles': ['normes', 'valeurs', 'professionnelles', 'd√©ontologie'],
    'organisation sociale et politique': ['organisation', 'politique', 'r√©gulation', '√©tatique', 'profession'],
    'm√©decine fond√©e sur les preuves': ['evidence', 'preuves', 'ebm', 'scientifique', 'responsabilit√©'],
    'd√©ontologie m√©dicale': ['d√©ontologie', 'conflit', 'valeurs', 'int√©r√™ts', 'code'],
    'exercice des professionnels': ['exercice', 'statuts', 'professionnels', 'france'],
    'ordres professionnels': ['ordres', 'professionnels', 'r√©gulation', 'cnom'],
    'acteurs de la sant√©': ['acteurs', 'sant√©', 'interactions', 'collaboration']
  };
  
  // Trouver la cl√© correspondante
  const matchingKey = Object.keys(keywordMap).find(key => concept.toLowerCase().includes(key.toLowerCase()));
  
  if (matchingKey) {
    return keywordMap[matchingKey];
  }
  
  // Fallback : extraire les mots principaux du concept
  return concept.split(' ').filter(word => word.length > 3);
}

export async function checkIC2Completeness() {
  console.log('üîç V√©rification compl√©tude IC-2 selon E-LiSA officiel...');
  
  try {
    // R√©cup√©rer l'item IC-2
    const { data: ic2Item, error } = await supabase
      .from('edn_items_immersive')
      .select('*')
      .or('item_code.eq.IC-2,slug.eq.valeurs-professionnelles-medecin')
      .single();

    if (error || !ic2Item) {
      console.error('‚ùå Item IC-2 non trouv√©:', error);
      return {
        exists: false,
        itemCode: 'IC-2',
        title: 'Non trouv√©',
        slug: 'valeurs-professionnelles-medecin',
        rangA: {
          expected: 6,
          found: 0,
          concepts: [],
          missingConcepts: [...EXPECTED_IC2_RANG_A]
        },
        rangB: {
          expected: 3,
          found: 0,
          concepts: [],
          missingConcepts: [...EXPECTED_IC2_RANG_B]
        },
        completeness: 0,
        recommendations: ['Item IC-2 non trouv√© dans la base de donn√©es']
      };
    }

    console.log('üì¶ Item IC-2 trouv√©:', ic2Item.item_code || ic2Item.slug);
    
    const report = {
      exists: true,
      itemCode: ic2Item.item_code,
      title: ic2Item.title,
      slug: ic2Item.slug,
      rangA: {
        expected: 6,
        found: 0,
        concepts: [] as string[],
        missingConcepts: [] as string[]
      },
      rangB: {
        expected: 3,
        found: 0,
        concepts: [] as string[],
        missingConcepts: [] as string[]
      },
      completeness: 0,
      recommendations: [] as string[]
    };

    // Analyser le contenu Rang A
    if (ic2Item.tableau_rang_a) {
      const analysis = analyzeContentForConcepts(ic2Item.tableau_rang_a, EXPECTED_IC2_RANG_A);
      report.rangA.found = analysis.found.length;
      report.rangA.concepts = analysis.found;
      report.rangA.missingConcepts = analysis.missing;
      
      console.log(`üìã Rang A: ${report.rangA.found}/6 concepts trouv√©s`);
    } else {
      report.rangA.missingConcepts = [...EXPECTED_IC2_RANG_A];
    }

    // Analyser le contenu Rang B
    if (ic2Item.tableau_rang_b) {
      const analysis = analyzeContentForConcepts(ic2Item.tableau_rang_b, EXPECTED_IC2_RANG_B);
      report.rangB.found = analysis.found.length;
      report.rangB.concepts = analysis.found;
      report.rangB.missingConcepts = analysis.missing;
      
      console.log(`üìã Rang B: ${report.rangB.found}/3 concepts trouv√©s`);
    } else {
      report.rangB.missingConcepts = [...EXPECTED_IC2_RANG_B];
    }

    // Calculer la compl√©tude
    const totalExpected = report.rangA.expected + report.rangB.expected;
    const totalFound = report.rangA.found + report.rangB.found;
    report.completeness = Math.round((totalFound / totalExpected) * 100);

    // G√©n√©rer les recommandations
    if (report.rangA.found < report.rangA.expected) {
      report.recommendations.push(`Rang A: ${report.rangA.expected - report.rangA.found} concepts manquants`);
      report.rangA.missingConcepts.forEach(concept => {
        report.recommendations.push(`Ajouter : ${concept}`);
      });
    }
    
    if (report.rangB.found < report.rangB.expected) {
      report.recommendations.push(`Rang B: ${report.rangB.expected - report.rangB.found} concepts manquants`);
      report.rangB.missingConcepts.forEach(concept => {
        report.recommendations.push(`Ajouter : ${concept}`);
      });
    }

    if (report.completeness < 100) {
      report.recommendations.push('Mettre √† jour l\'item IC-2 selon le r√©f√©rentiel E-LiSA officiel');
    }

    // Afficher le rapport
    console.log('\nüìä RAPPORT DE COMPL√âTUDE IC-2');
    console.log('==================================');
    console.log(`üì¶ Item: ${report.itemCode} - ${report.title}`);
    console.log(`üéØ Compl√©tude globale: ${report.completeness}%`);
    console.log(`üìã Rang A: ${report.rangA.found}/${report.rangA.expected} concepts`);
    console.log(`üìã Rang B: ${report.rangB.found}/${report.rangB.expected} concepts`);
    
    if (report.completeness === 100) {
      console.log('‚úÖ Item IC-2 COMPLET √† 100% selon E-LiSA');
    } else {
      console.log('‚ö†Ô∏è Item IC-2 INCOMPLET');
      console.log('\nüí° Recommandations:');
      report.recommendations.forEach(rec => console.log(`  ‚Ä¢ ${rec}`));
    }

    return report;

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification IC-2:', error);
    throw error;
  }
}

// Export pour utilisation directe
export async function runIC2CompletenessCheck() {
  try {
    const report = await checkIC2Completeness();
    return report;
  } catch (error) {
    console.error('‚ùå √âchec de la v√©rification IC-2:', error);
    throw error;
  }
}
