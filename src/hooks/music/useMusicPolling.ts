
import { supabase } from '@/integrations/supabase/client';

interface PollingConfig {
  rang: 'A' | 'B';
  requestBody: any;
  maxPolls?: number;
  pollInterval?: number;
  onProgress: (rang: 'A' | 'B', progress: {
    progress: number;
    attempts: number;
    maxAttempts: number;
    estimatedTimeRemaining: number;
  }) => void;
  onSuccess: (rang: 'A' | 'B', audioUrl: string) => void;
  onError: (error: Error) => void;
}

export const useMusicPolling = () => {
  const startPolling = ({ 
    rang, 
    requestBody, 
    maxPolls = 18, // R√©duit √† 18 (3 minutes max au lieu de 5)
    pollInterval = 5000, // R√©duit √† 5s pour plus de r√©activit√©
    onProgress,
    onSuccess,
    onError
  }: PollingConfig) => {
    let pollCount = 0;
    let consecutiveErrors = 0;
    const maxConsecutiveErrors = 3; // R√©duit √† 3 erreurs cons√©cutives
    
    const intervalId = setInterval(async () => {
      try {
        pollCount++;
        
        // Progression plus rapide et r√©aliste
        let baseProgress;
        if (pollCount <= 3) {
          // Premi√®re phase : progression rapide (0-30%)
          baseProgress = Math.min(Math.round((pollCount / 3) * 30), 30);
        } else if (pollCount <= 8) {
          // Deuxi√®me phase : progression normale (30-70%)
          baseProgress = 30 + Math.min(Math.round(((pollCount - 3) / 5) * 40), 40);
        } else if (pollCount <= 15) {
          // Troisi√®me phase : progression mod√©r√©e (70-95%)
          baseProgress = 70 + Math.min(Math.round(((pollCount - 8) / 7) * 25), 25);
        } else {
          // Phase finale : progression tr√®s lente (95-98%)
          baseProgress = 95 + Math.min(Math.round(((pollCount - 15) / 3) * 3), 3);
        }
        
        const estimatedTimeRemaining = Math.max(Math.round(((maxPolls - pollCount) * pollInterval) / 60000), 0);
        
        console.log(`üîÑ Polling rapide ${pollCount}/${maxPolls} pour Rang ${rang} - Progress: ${baseProgress}%`);
        
        onProgress(rang, {
          progress: baseProgress,
          attempts: pollCount,
          maxAttempts: maxPolls,
          estimatedTimeRemaining
        });

        // Faire un nouvel appel pour v√©rifier le statut
        const { data: pollData, error: pollError } = await supabase.functions.invoke('generate-music', {
          body: requestBody
        });

        if (pollError) {
          consecutiveErrors++;
          console.warn(`‚ö†Ô∏è Erreur polling ${pollCount} (${consecutiveErrors}/${maxConsecutiveErrors}):`, pollError);
          
          // Si trop d'erreurs cons√©cutives, on arr√™te plus rapidement
          if (consecutiveErrors >= maxConsecutiveErrors) {
            clearInterval(intervalId);
            onError(new Error(`Trop d'erreurs cons√©cutives lors du polling (${consecutiveErrors})`));
            return;
          }
          
          // Sinon on continue mais on v√©rifie si on a atteint le maximum de tentatives
          if (pollCount >= maxPolls) {
            clearInterval(intervalId);
            onError(new Error('La g√©n√©ration prend plus de temps que pr√©vu (2 minutes). R√©essayez.'));
            return;
          }
          return;
        }

        // Reset du compteur d'erreurs si succ√®s
        consecutiveErrors = 0;
        console.log(`üì• Donn√©es du polling ${pollCount}:`, pollData);

        // V√©rifier si la g√©n√©ration est termin√©e avec succ√®s
        if (pollData?.status === 'success' && pollData?.audioUrl) {
          console.log('‚úÖ G√âN√âRATION TERMIN√âE:', pollData.audioUrl);
          clearInterval(intervalId);
          
          // Progression finale √† 100%
          onProgress(rang, {
            progress: 100,
            attempts: pollCount,
            maxAttempts: maxPolls,
            estimatedTimeRemaining: 0
          });
          
          onSuccess(rang, pollData.audioUrl);
          return;
        }

        // V√©rifier si il y a une erreur d√©finitive
        if (pollData?.status === 'error') {
          clearInterval(intervalId);
          onError(new Error(pollData.message || 'Erreur lors de la g√©n√©ration'));
          return;
        }

        // Gestion sp√©ciale pour les timeouts (status 408)
        if (pollData?.status === 'timeout') {
          console.log('‚è∞ Timeout d√©tect√©, on continue le polling...');
          // On ne s'arr√™te pas, on continue √† esp√©rer
        }

        // Timeout atteint plus rapidement
        if (pollCount >= maxPolls) {
          clearInterval(intervalId);
          onError(new Error('La g√©n√©ration prend plus de temps que pr√©vu. Suno est peut-√™tre occup√©. R√©essayez dans quelques minutes.'));
          return;
        }
        
      } catch (pollError) {
        consecutiveErrors++;
        console.error(`‚ùå Erreur critique lors du polling ${pollCount}:`, pollError);
        
        if (consecutiveErrors >= maxConsecutiveErrors || pollCount >= maxPolls) {
          clearInterval(intervalId);
          onError(pollError as Error);
        }
      }
    }, pollInterval);

    return intervalId;
  };

  return {
    startPolling
  };
};
