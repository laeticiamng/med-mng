
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { AlertTriangle, Lightbulb, Eye, Target, BookOpen, Zap, Shield, CheckCircle } from 'lucide-react';

interface TableauRangAProps {
  data: {
    theme: string;
    colonnes: string[];
    lignes: string[][];
  };
}

export const TableauRangA = ({ data }: TableauRangAProps) => {
  console.log('TableauRangA component - Received data:', data);
  
  // V√©rifications de s√©curit√©
  if (!data || !data.colonnes || !data.lignes) {
    console.error('TableauRangA: Invalid data structure', data);
    return (
      <div className="text-center space-y-6">
        <h2 className="text-3xl font-serif text-amber-900">Tableau Rang A</h2>
        <p className="text-amber-700">Structure de donn√©es invalide</p>
      </div>
    );
  }

  // Cr√©er les lignes enrichies avec contenu p√©dagogique intelligent
  const lignesEnrichies = generateLignesRangAIntelligent(data);

  // D√©terminer les colonnes pertinentes selon le contenu
  const colonnesUtiles = determinerColonnesUtiles(lignesEnrichies);

  console.log('TableauRangA: Rendering optimized table with', colonnesUtiles.length, 'columns and', lignesEnrichies.length, 'rows');
  
  return (
    <div className="space-y-6">
      <div className="text-center">
        <Badge variant="secondary" className="bg-green-100 text-green-800 mb-4 text-lg px-4 py-2">
          Rang A - Fondamentaux Essentiels
        </Badge>
        <h2 className="text-3xl font-serif text-amber-900 mb-2">{data.theme || 'Tableau Rang A'}</h2>
        <p className="text-amber-700 text-lg">Connaissances indispensables pour l'EDN - Note maximale garantie</p>
      </div>

      <div className="bg-gradient-to-r from-green-50 to-amber-50 p-6 rounded-lg border border-green-200">
        <div className="grid grid-cols-4 gap-4 text-sm">
          <div className="flex items-center space-x-2 text-red-700">
            <AlertTriangle className="h-5 w-5" />
            <span className="font-medium">Pi√®ges sp√©cifiques</span>
          </div>
          <div className="flex items-center space-x-2 text-yellow-700">
            <Lightbulb className="h-5 w-5" />
            <span className="font-medium">Moyens mn√©motechniques cibl√©s</span>
          </div>
          <div className="flex items-center space-x-2 text-purple-700">
            <Eye className="h-5 w-5" />
            <span className="font-medium">Subtilit√©s critiques</span>
          </div>
          <div className="flex items-center space-x-2 text-teal-700">
            <Zap className="h-5 w-5" />
            <span className="font-medium">Applications concr√®tes</span>
          </div>
        </div>
      </div>

      <div className="overflow-x-auto bg-white rounded-lg shadow-xl border border-gray-200">
        <div className="min-w-full">
          {/* En-t√™tes de colonnes dynamiques */}
          <div className={`grid gap-2 mb-2 p-2`} style={{gridTemplateColumns: `repeat(${colonnesUtiles.length}, 1fr)`}}>
            {colonnesUtiles.map((colonne, index) => (
              <div
                key={index}
                className={`p-4 rounded-lg text-center font-bold text-sm text-white ${colonne.couleur} shadow-md`}
              >
                <div className="flex items-center justify-center space-x-1">
                  <span>{colonne.nom}</span>
                  {colonne.icone}
                </div>
              </div>
            ))}
          </div>
          
          {/* Lignes de donn√©es optimis√©es */}
          {lignesEnrichies.map((ligne, ligneIndex) => (
            <div key={ligneIndex} className={`grid gap-2 mb-2 p-2`} style={{gridTemplateColumns: `repeat(${colonnesUtiles.length}, 1fr)`}}>
              {ligne.map((cellule, celluleIndex) => {
                if (!cellule || cellule.trim() === '') return null;
                
                return (
                  <Card
                    key={celluleIndex}
                    className={`p-4 border-2 transition-all duration-300 hover:shadow-lg hover:scale-[1.02] min-h-[120px] ${colonnesUtiles[celluleIndex].couleurCellule}`}
                  >
                    <div className={`text-sm leading-relaxed ${colonnesUtiles[celluleIndex].couleurTexte}`}>
                      <div className="space-y-2">
                        {cellule.split('\n').map((ligne, index) => (
                          <div key={index} className="leading-relaxed">
                            {ligne}
                          </div>
                        ))}
                      </div>
                    </div>
                  </Card>
                );
              })}
            </div>
          ))}
        </div>
      </div>

      <div className="text-center bg-green-50 p-6 rounded-lg border border-green-200">
        <div className="flex items-center justify-center space-x-2 mb-2">
          <CheckCircle className="h-6 w-6 text-green-600" />
          <p className="text-lg text-green-700 font-bold">
            Tableau Rang A optimis√© : {colonnesUtiles.length} colonnes √ó {lignesEnrichies.length} lignes
          </p>
        </div>
        <p className="text-sm text-green-600">
          üìö Structure adaptative pour maximiser l'efficacit√© d'apprentissage
        </p>
      </div>
    </div>
  );
};

// Configuration des colonnes possibles avec leurs propri√©t√©s
const COLONNES_CONFIG = [
  {
    nom: 'Concept Cl√©',
    icone: <BookOpen className="h-3 w-3 inline ml-1" />,
    couleur: 'bg-slate-600',
    couleurCellule: 'bg-slate-50 border-slate-300',
    couleurTexte: 'text-slate-800 font-bold',
    obligatoire: true
  },
  {
    nom: 'D√©finition Pr√©cise',
    icone: <Target className="h-3 w-3 inline ml-1" />,
    couleur: 'bg-blue-600',
    couleurCellule: 'bg-blue-50 border-blue-300',
    couleurTexte: 'text-blue-800',
    obligatoire: true
  },
  {
    nom: 'Exemple Concret',
    icone: <CheckCircle className="h-3 w-3 inline ml-1" />,
    couleur: 'bg-green-600',
    couleurCellule: 'bg-green-50 border-green-300',
    couleurTexte: 'text-green-800',
    obligatoire: false
  },
  {
    nom: 'Pi√®ge √† √âviter',
    icone: <AlertTriangle className="h-3 w-3 inline ml-1" />,
    couleur: 'bg-red-600',
    couleurCellule: 'bg-red-50 border-red-300',
    couleurTexte: 'text-red-800 font-semibold',
    obligatoire: false
  },
  {
    nom: 'Moyen Mn√©motechnique',
    icone: <Lightbulb className="h-3 w-3 inline ml-1" />,
    couleur: 'bg-yellow-600',
    couleurCellule: 'bg-yellow-50 border-yellow-300',
    couleurTexte: 'text-yellow-800 font-medium italic',
    obligatoire: false
  },
  {
    nom: 'Subtilit√© Importante',
    icone: <Eye className="h-3 w-3 inline ml-1" />,
    couleur: 'bg-purple-600',
    couleurCellule: 'bg-purple-50 border-purple-300',
    couleurTexte: 'text-purple-800 font-medium',
    obligatoire: false
  },
  {
    nom: 'Application Pratique',
    icone: <Zap className="h-3 w-3 inline ml-1" />,
    couleur: 'bg-teal-600',
    couleurCellule: 'bg-teal-50 border-teal-300',
    couleurTexte: 'text-teal-800 font-medium',
    obligatoire: false
  },
  {
    nom: 'Point de Vigilance',
    icone: <Shield className="h-3 w-3 inline ml-1" />,
    couleur: 'bg-orange-600',
    couleurCellule: 'bg-orange-50 border-orange-300',
    couleurTexte: 'text-orange-800 font-medium',
    obligatoire: false
  }
];

// Fonction pour d√©terminer les colonnes utiles selon le contenu
function determinerColonnesUtiles(lignes: string[][]): any[] {
  const colonnesUtiles = [];
  
  for (let colIndex = 0; colIndex < COLONNES_CONFIG.length; colIndex++) {
    const config = COLONNES_CONFIG[colIndex];
    
    // Toujours inclure les colonnes obligatoires
    if (config.obligatoire) {
      colonnesUtiles.push(config);
      continue;
    }
    
    // Pour les autres colonnes, v√©rifier s'il y a du contenu pertinent
    const aContenuPertinent = lignes.some(ligne => {
      const cellule = ligne[colIndex];
      return cellule && 
             cellule.trim() !== '' && 
             !cellule.includes('√† d√©finir') &&
             !cellule.includes('√† compl√©ter') &&
             !cellule.includes('√† fournir') &&
             !cellule.includes('√† retenir') &&
             !cellule.includes('√† m√©moriser') &&
             !cellule.includes('essentiel') &&
             cellule.length > 20; // Contenu substantiel
    });
    
    if (aContenuPertinent) {
      colonnesUtiles.push(config);
    }
  }
  
  return colonnesUtiles;
}

// Fonction pour g√©n√©rer les lignes enrichies de mani√®re intelligente
function generateLignesRangAIntelligent(data: any): string[][] {
  const lignesBase = data.lignes || [];
  
  // Concepts m√©dicaux fondamentaux avec contenu p√©dagogique cibl√©
  const conceptsRangA = [
    {
      concept: "Colloque Singulier",
      definition: "Relation exclusive m√©decin-patient caract√©ris√©e par la confidentialit√©, le respect mutuel et l'individualisation des soins",
      exemple: "Consultation priv√©e o√π le m√©decin adapte son approche selon l'√¢ge, la culture et les besoins sp√©cifiques du patient",
      piege: "Ne pas confondre avec colloque dual - le singulier implique l'unicit√© de la relation th√©rapeutique",
      mnemo: "SINGULIER = 'Seul Individu N√©cessite G√©n√©rosit√© Unique Liaison Individualis√©e Empathique Respectueuse'",
      subtilite: "Le colloque reste singulier m√™me en pr√©sence de la famille - c'est l'attention port√©e au patient qui compte",
      application: "Personnaliser chaque consultation selon les caract√©ristiques bio-psycho-sociales du patient",
      vigilance: "Maintenir la confidentialit√© absolue m√™me avec les proches du patient"
    },
    {
      concept: "Personne de Confiance",
      definition: "Personne majeure d√©sign√©e par √©crit par le patient pour l'accompagner dans ses d√©marches et faire valoir sa volont√©",
      exemple: "Patient hospitalis√© qui d√©signe par √©crit son conjoint comme personne de confiance pour les d√©cisions m√©dicales",
      piege: "Ne pas confondre avec le tuteur l√©gal - la personne de confiance n'a pas de pouvoir d√©cisionnel l√©gal",
      mnemo: "PC = 'Personne Choisie' par le patient, 'Parole Compte' en cas d'inconscience",
      subtilite: "Son t√©moignage sur la volont√© du patient pr√©vaut sur tous les autres avis de l'entourage",
      application: "Solliciter syst√©matiquement la d√©signation lors de toute hospitalisation ou consultation importante",
      vigilance: "V√©rifier l'identit√© et la d√©signation √©crite formelle avant toute consultation"
    },
    {
      concept: "D√©marche √âthique M√©dicale",
      definition: "Processus de r√©flexion structur√© pour r√©soudre les dilemmes moraux en m√©decine, int√©grant principes √©thiques et contexte clinique",
      exemple: "Face √† un refus de transfusion chez un T√©moin de J√©hovah : respecter l'autonomie tout en √©valuant les alternatives th√©rapeutiques",
      piege: "Ne pas appliquer automatiquement les principes - chaque situation n√©cessite une analyse contextuelle",
      mnemo: "√âTHIQUE = 'Examiner Toutes Hypoth√®ses Intelligemment Questionner Utilement √âquilibrer'",
      subtilite: "L'√©thique m√©dicale n'est pas que d√©ontologique - elle int√®gre aussi l'√©thique du care et de la vertu",
      application: "Utiliser la grille des 4 principes (autonomie, bienfaisance, non-malfaisance, justice) pour analyser chaque dilemme",
      vigilance: "Ne jamais imposer ses propres valeurs morales au patient"
    },
    {
      concept: "Organisation des Soins",
      definition: "Structuration coordonn√©e des ressources humaines, mat√©rielles et organisationnelles pour optimiser la prise en charge des patients",
      exemple: "Mise en place d'un parcours de soins coordonn√© entre m√©decin traitant, sp√©cialistes et h√¥pital pour un patient diab√©tique",
      piege: "Ne pas confondre efficience organisationnelle et qualit√© des soins - l'une ne garantit pas l'autre",
      mnemo: "ORGANISATION = ‚ú®Organisation Rationnelle Garantit Am√©lioration Noteworthy Individuelle Soins Appropri√©s Totalement Int√©gr√©s Optimis√©s N√©cessaires‚ú®",
      subtilite: "L'organisation doit s'adapter au patient et non l'inverse - personnalisation dans la standardisation",
      application: "Coordonner les interventions multiprofessionnelles en maintenant la continuit√© des soins",
      vigilance: "√âviter la fragmentation des soins par exc√®s de sp√©cialisation"
    }
  ];

  // G√©n√©rer les lignes √† partir des concepts avec contenu intelligent
  const lignes: string[][] = [];
  
  conceptsRangA.forEach(concept => {
    const ligne = [
      concept.concept,
      concept.definition,
      concept.exemple || '',
      concept.piege || '',
      concept.mnemo || '',
      concept.subtilite || '',
      concept.application || '',
      concept.vigilance || ''
    ];
    
    // Ne garder que les cellules avec du contenu pertinent
    lignes.push(ligne);
  });

  // Compl√©ter avec les donn√©es originales si pertinentes
  if (lignesBase.length > 0) {
    lignesBase.forEach((ligne: string[]) => {
      const ligneComplete = [
        ligne[0] || '',
        ligne[1] || '',
        ligne[2] || '',
        getPiegeSpecifique(ligne[0] || ''),
        getMnemoIntelligent(ligne[0] || ''),
        getSubtiliteReelle(ligne[0] || ''),
        getApplicationConcrete(ligne[0] || ''),
        getVigilanceSpecifique(ligne[0] || '')
      ];
      
      // V√©rifier si la ligne apporte de la valeur
      const aContenuPertinent = ligneComplete.some((cellule, index) => {
        if (index < 2) return true; // Toujours garder concept et d√©finition
        return cellule && cellule.length > 20 && !cellule.includes('√† d√©finir');
      });
      
      if (aContenuPertinent) {
        lignes.push(ligneComplete);
      }
    });
  }

  return lignes;
}

// Fonctions utilitaires intelligentes qui ne renvoient du contenu que s'il est pertinent
function getPiegeSpecifique(concept: string): string {
  const piegesSpecifiques = {
    'colloque singulier': 'Ne pas confondre avec colloque dual - le singulier implique l'unicit√© de la relation',
    'personne de confiance': 'Ne pas confondre avec tuteur l√©gal - pas de pouvoir d√©cisionnel l√©gal',
    'd√©marche √©thique': 'Ne pas appliquer automatiquement les principes - analyse contextuelle n√©cessaire',
    'organisation des soins': 'Ne pas confondre efficience organisationnelle et qualit√© des soins'
  };
  
  const key = concept.toLowerCase();
  for (const [k, v] of Object.entries(piegesSpecifiques)) {
    if (key.includes(k)) return v;
  }
  return '';
}

function getMnemoIntelligent(concept: string): string {
  const mnemosIntelligents = {
    'colloque singulier': 'SINGULIER = "Seul Individu N√©cessite G√©n√©rosit√© Unique Liaison Individualis√©e Empathique Respectueuse"',
    'personne de confiance': 'PC = "Personne Choisie" + "Parole Compte" en cas d\'inconscience',
    'd√©marche √©thique': '√âTHIQUE = "Examiner Toutes Hypoth√®ses Intelligemment Questionner Utilement √âquilibrer"'
  };
  
  const key = concept.toLowerCase();
  for (const [k, v] of Object.entries(mnemosIntelligents)) {
    if (key.includes(k)) return v;
  }
  return '';
}

function getSubtiliteReelle(concept: string): string {
  const subtilitesReelles = {
    'colloque singulier': 'Reste singulier m√™me en pr√©sence de la famille - c\'est l\'attention au patient qui compte',
    'personne de confiance': 'Son t√©moignage sur la volont√© du patient pr√©vaut sur tous les autres avis',
    'd√©marche √©thique': 'N\'est pas que d√©ontologique - int√®gre aussi √©thique du care et de la vertu',
    'organisation des soins': 'Doit s\'adapter au patient et non l\'inverse - personnalisation dans la standardisation'
  };
  
  const key = concept.toLowerCase();
  for (const [k, v] of Object.entries(subtilitesReelles)) {
    if (key.includes(k)) return v;
  }
  return '';
}

function getApplicationConcrete(concept: string): string {
  const applicationsConcrates = {
    'colloque singulier': 'Personnaliser chaque consultation selon les caract√©ristiques bio-psycho-sociales',
    'personne de confiance': 'Solliciter syst√©matiquement la d√©signation lors de toute hospitalisation importante',
    'd√©marche √©thique': 'Utiliser la grille des 4 principes pour analyser chaque dilemme moral',
    'organisation des soins': 'Coordonner les interventions multiprofessionnelles en maintenant la continuit√©'
  };
  
  const key = concept.toLowerCase();
  for (const [k, v] of Object.entries(applicationsConcrates)) {
    if (key.includes(k)) return v;
  }
  return '';
}

function getVigilanceSpecifique(concept: string): string {
  const vigilancesSpecifiques = {
    'colloque singulier': 'Maintenir la confidentialit√© absolue m√™me avec les proches du patient',
    'personne de confiance': 'V√©rifier l\'identit√© et la d√©signation √©crite formelle avant consultation',
    'd√©marche √©thique': 'Ne jamais imposer ses propres valeurs morales au patient',
    'organisation des soins': '√âviter la fragmentation des soins par exc√®s de sp√©cialisation'
  };
  
  const key = concept.toLowerCase();
  for (const [k, v] of Object.entries(vigilancesSpecifiques)) {
    if (key.includes(k)) return v;
  }
  return '';
}
