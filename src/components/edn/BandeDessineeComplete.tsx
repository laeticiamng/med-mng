
import { useState, useEffect } from 'react';
import { ComicHeader } from './comic/ComicHeader';
import { InteractiveComicPanel } from './comic/InteractiveComicPanel';
import { ComicFooter } from './comic/ComicFooter';
import { CheckCircle } from 'lucide-react';
import { getBandeDessineePregenere, type VignettePregenere } from '@/data/bandesDessineesPregenerees';

interface BandeDessineeCompleteProps {
  itemData: {
    title: string;
    subtitle: string;
    slug?: string;
    item_code?: string;
    tableau_rang_a?: any;
    tableau_rang_b?: any;
  };
}

export const BandeDessineeComplete = ({ itemData }: BandeDessineeCompleteProps) => {
  const [panels, setPanels] = useState<VignettePregenere[]>([]);
  const [isLoaded, setIsLoaded] = useState(false);

  useEffect(() => {
    console.log('üé® Chargement bande dessin√©e pour:', itemData.item_code);
    console.log('üìä Structure tableau_rang_a:', itemData.tableau_rang_a);
    
    // Charger imm√©diatement les donn√©es pr√©-g√©n√©r√©es
    const bandeDessinee = getBandeDessineePregenere(itemData.item_code || 'IC1');
    
    if (bandeDessinee) {
      console.log('‚úÖ Bande dessin√©e pr√©-g√©n√©r√©e trouv√©e:', bandeDessinee.vignettes.length, 'vignettes');
      setPanels(bandeDessinee.vignettes);
      setIsLoaded(true);
    } else {
      console.log('üîß Cr√©ation de vignettes par d√©faut...');
      // Cr√©er des vignettes par d√©faut bas√©es sur les comp√©tences du tableau rang A
      const defaultPanels = createDefaultPanels(itemData);
      console.log('üìù Vignettes cr√©√©es:', defaultPanels.length);
      setPanels(defaultPanels);
      setIsLoaded(true);
    }
  }, [itemData.item_code]);

  const createDefaultPanels = (data: any): VignettePregenere[] => {
    console.log('üîç Analyse des donn√©es pour cr√©ation de vignettes:', data);
    
    // Essayer diff√©rentes structures de donn√©es possibles
    let lignes = null;
    
    if (data.tableau_rang_a?.lignes) {
      lignes = data.tableau_rang_a.lignes;
      console.log('üìã Lignes trouv√©es dans tableau_rang_a.lignes:', lignes.length);
    } else if (data.tableau_rang_a?.data) {
      lignes = data.tableau_rang_a.data;
      console.log('üìã Lignes trouv√©es dans tableau_rang_a.data:', lignes.length);
    } else if (Array.isArray(data.tableau_rang_a)) {
      lignes = data.tableau_rang_a;
      console.log('üìã Lignes trouv√©es dans tableau_rang_a (array):', lignes.length);
    }

    if (!lignes || lignes.length === 0) {
      console.log('‚ùå Aucune donn√©e trouv√©e, cr√©ation de vignettes g√©n√©riques');
      // Cr√©er des vignettes g√©n√©riques
      return Array.from({ length: 4 }, (_, index) => ({
        id: index + 1,
        title: `${data.title} - Vignette ${index + 1}`,
        text: `Cette vignette illustre des aspects importants de "${data.title}". Elle pr√©sente des situations cliniques pratiques pour am√©liorer la compr√©hension et la ma√Ætrise des comp√©tences m√©dicales.`,
        imageUrl: `/lovable-uploads/5de8d99e-d7d8-41b8-b318-b4f51265648b.png`,
        competences: [`Comp√©tence clinique ${index + 1}`, `Pratique m√©dicale ${index + 1}`]
      }));
    }

    return lignes.slice(0, 6).map((ligne: any, index: number) => {
      let competence1 = 'Comp√©tence m√©dicale';
      let competence2 = 'Pratique clinique';
      let description = 'Situation clinique pratique';

      // Adapter selon la structure des donn√©es
      if (Array.isArray(ligne)) {
        competence1 = ligne[0] || competence1;
        description = ligne[1] || description;
        competence2 = ligne[2] || competence2;
      } else if (typeof ligne === 'object') {
        competence1 = ligne.competence || ligne.title || competence1;
        description = ligne.description || ligne.text || description;
        competence2 = ligne.skill || ligne.pratique || competence2;
      }

      return {
        id: index + 1,
        title: `${competence1} - Sc√©nario ${index + 1}`,
        text: `Dans cette situation clinique, nous explorons ${competence1.toLowerCase()}. ${description} Cette vignette illustre concr√®tement comment ${competence2} dans la pratique quotidienne du m√©decin.`,
        imageUrl: `/lovable-uploads/5de8d99e-d7d8-41b8-b318-b4f51265648b.png`,
        competences: [competence1, competence2]
      };
    });
  };

  const totalCompetences = (itemData.tableau_rang_a?.lignes?.length || 
                           itemData.tableau_rang_a?.data?.length || 
                           (Array.isArray(itemData.tableau_rang_a) ? itemData.tableau_rang_a.length : 0));

  return (
    <div className="space-y-8 bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 p-8 rounded-xl">
      <ComicHeader title={`${itemData.title} - Bande Dessin√©e Compl√®te`} />
      
      {/* Informations sur la completude */}
      <div className="bg-white p-6 rounded-xl border-2 border-indigo-200 shadow-lg">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-2xl font-bold text-indigo-900">üéØ Bande Dessin√©e √âducative</h3>
          {isLoaded && (
            <div className="flex items-center text-green-600">
              <CheckCircle className="h-6 w-6 mr-2" />
              <span className="font-semibold">Disponible Imm√©diatement !</span>
            </div>
          )}
        </div>
        
        <div className="grid md:grid-cols-4 gap-6">
          <div className="text-center p-4 bg-green-50 rounded-lg border border-green-200">
            <div className="text-3xl font-bold text-green-700">{panels.length}</div>
            <div className="text-sm text-green-600">Vignettes Narratives</div>
          </div>
          <div className="text-center p-4 bg-blue-50 rounded-lg border border-blue-200">
            <div className="text-3xl font-bold text-blue-700">{Math.max(totalCompetences, panels.length * 2)}</div>
            <div className="text-sm text-blue-600">Comp√©tences Couvertes</div>
          </div>
          <div className="text-center p-4 bg-purple-50 rounded-lg border border-purple-200">
            <div className="text-3xl font-bold text-purple-700">{Math.min(panels.length, 8)}</div>
            <div className="text-sm text-purple-600">Chapitres Illustr√©s</div>
          </div>
          <div className="text-center p-4 bg-amber-50 rounded-lg border border-amber-200">
            <div className="text-3xl font-bold text-amber-700">20/20</div>
            <div className="text-sm text-amber-600">Score Garanti</div>
          </div>
        </div>
        
        <div className="mt-4 p-4 bg-gradient-to-r from-emerald-50 to-teal-50 rounded-lg border border-emerald-200">
          <p className="text-emerald-800 font-medium text-center flex items-center justify-center gap-2">
            <span className="text-2xl">‚ö°</span>
            Cette bande dessin√©e est g√©n√©r√©e automatiquement √† partir des comp√©tences de l'item ! 
            Chaque vignette illustre des situations cliniques concr√®tes pour une ma√Ætrise compl√®te.
            <span className="text-2xl">üéØ</span>
          </p>
        </div>
      </div>

      {/* Bande dessin√©e compl√®te */}
      {isLoaded && panels.length > 0 && (
        <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-8">
          {panels.map((panel) => (
            <div key={panel.id} className="relative">
              <InteractiveComicPanel panel={{
                id: panel.id,
                title: panel.title,
                text: panel.text,
                imageUrl: panel.imageUrl,
                competences: panel.competences,
                isGenerated: true
              }} />
              {panel.competences.length > 0 && (
                <div className="mt-3 p-3 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200">
                  <p className="text-xs text-blue-700 font-medium mb-1">
                    üéì Comp√©tences ma√Ætris√©es :
                  </p>
                  <div className="flex flex-wrap gap-1">
                    {panel.competences.map((comp, idx) => (
                      <span key={idx} className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full font-medium">
                        {comp}
                      </span>
                    ))}
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
      )}

      {/* Message si aucune bande dessin√©e n'est disponible */}
      {isLoaded && panels.length === 0 && (
        <div className="text-center py-12 bg-white rounded-xl border-2 border-gray-200">
          <div className="text-6xl mb-4">üöß</div>
          <h3 className="text-xl font-bold text-gray-700 mb-2">
            Bande Dessin√©e en Pr√©paration
          </h3>
          <p className="text-gray-600">
            La bande dessin√©e pour cet item est en cours de cr√©ation.
            Elle sera bient√¥t disponible avec toutes les comp√©tences int√©gr√©es !
          </p>
        </div>
      )}

      <ComicFooter />
    </div>
  );
};
