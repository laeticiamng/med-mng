
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { AlertTriangle, Lightbulb, Eye, Target, BookOpen, Zap, Shield, CheckCircle, Star, Crown } from 'lucide-react';

interface TableauRangBProps {
  data: {
    theme: string;
    colonnes: string[];
    lignes: string[][];
  };
}

export const TableauRangB = ({ data }: TableauRangBProps) => {
  console.log('TableauRangB component - Received data:', data);
  
  // V√©rifications de s√©curit√©
  if (!data || !data.colonnes || !data.lignes) {
    console.error('TableauRangB: Invalid data structure', data);
    return (
      <div className="text-center space-y-6">
        <h2 className="text-3xl font-serif text-amber-900">Tableau Rang B</h2>
        <p className="text-amber-700">Structure de donn√©es invalide</p>
      </div>
    );
  }

  // Cr√©er les lignes enrichies avec contenu expert intelligent
  const lignesExpertes = generateLignesRangBIntelligent(data);

  // D√©terminer les colonnes pertinentes selon le contenu expert
  const colonnesUtiles = determinerColonnesUtilesB(lignesExpertes);

  console.log('TableauRangB: Rendering optimized expert table with', colonnesUtiles.length, 'columns and', lignesExpertes.length, 'rows');
  
  return (
    <div className="space-y-6">
      <div className="text-center">
        <Badge variant="secondary" className="bg-blue-100 text-blue-800 mb-4 text-lg px-4 py-2">
          Rang B - Ma√Ætrise Experte
        </Badge>
        <h2 className="text-3xl font-serif text-amber-900 mb-2">{data.theme || 'Tableau Rang B'}</h2>
        <p className="text-amber-700 text-lg">Approfondissement expert pour l'excellence - Diff√©renciation garantie</p>
      </div>

      <div className="bg-gradient-to-r from-blue-50 via-purple-50 to-indigo-50 p-6 rounded-lg border border-blue-200">
        <div className="grid grid-cols-4 gap-4 text-sm">
          <div className="flex items-center space-x-2 text-red-700">
            <AlertTriangle className="h-5 w-5" />
            <span className="font-medium">√âcueils experts</span>
          </div>
          <div className="flex items-center space-x-2 text-amber-700">
            <Lightbulb className="h-5 w-5" />
            <span className="font-medium">Techniques avanc√©es</span>
          </div>
          <div className="flex items-center space-x-2 text-purple-700">
            <Eye className="h-5 w-5" />
            <span className="font-medium">Distinctions fines</span>
          </div>
          <div className="flex items-center space-x-2 text-teal-700">
            <Crown className="h-5 w-5" />
            <span className="font-medium">Ma√Ætrise technique</span>
          </div>
        </div>
      </div>

      <div className="space-y-8">
        {lignesExpertes.map((ligne, ligneIndex) => (
          <div key={ligneIndex} className="space-y-4">
            {/* Titre principal du concept */}
            <div className="text-center">
              <h3 className="text-2xl font-bold text-blue-900 mb-2">{ligne[0]}</h3>
              <p className="text-lg text-blue-700 bg-blue-50 p-4 rounded-lg border border-blue-200">
                {ligne[1]}
              </p>
            </div>
            
            {/* Grille de cartes pour les autres informations */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {ligne.slice(2).map((cellule, celluleIndex) => {
                if (!cellule || cellule.trim() === '') return null;
                
                const colonneIndex = celluleIndex + 2;
                const colonne = colonnesUtiles[colonneIndex];
                
                if (!colonne) return null;
                
                return (
                  <Card
                    key={celluleIndex}
                    className={`p-4 border-2 transition-all duration-300 hover:shadow-lg hover:scale-[1.02] ${colonne.couleurCellule}`}
                  >
                    <div className="mb-3">
                      <div className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium text-white ${colonne.couleur}`}>
                        {colonne.icone}
                        <span className="ml-2">{colonne.nom}</span>
                      </div>
                    </div>
                    <div className={`text-sm leading-relaxed ${colonne.couleurTexte}`}>
                      <div className="space-y-2">
                        {cellule.split('\n').map((ligne, index) => (
                          <div key={index} className="leading-relaxed">
                            {ligne}
                          </div>
                        ))}
                      </div>
                    </div>
                  </Card>
                );
              })}
            </div>
          </div>
        ))}
      </div>

      <div className="text-center bg-blue-50 p-6 rounded-lg border border-blue-200">
        <div className="flex items-center justify-center space-x-2 mb-2">
          <Crown className="h-6 w-6 text-blue-600" />
          <p className="text-lg text-blue-700 font-bold">
            Tableau Rang B expert optimis√© : {colonnesUtiles.length} colonnes √ó {lignesExpertes.length} lignes
          </p>
        </div>
        <p className="text-sm text-blue-600">
          üéØ Structure adaptative experte pour l'excellence et la diff√©renciation maximale
        </p>
      </div>
    </div>
  );
};

// Configuration des colonnes expertes possibles
const COLONNES_CONFIG_B = [
  {
    nom: 'Concept Avanc√©',
    icone: <Crown className="h-3 w-3 inline ml-1" />,
    couleur: 'bg-indigo-600',
    couleurCellule: 'bg-indigo-50 border-indigo-300',
    couleurTexte: 'text-indigo-800 font-bold',
    obligatoire: true
  },
  {
    nom: 'Analyse Experte',
    icone: <Target className="h-3 w-3 inline ml-1" />,
    couleur: 'bg-blue-600',
    couleurCellule: 'bg-blue-50 border-blue-300',
    couleurTexte: 'text-blue-800 font-medium',
    obligatoire: true
  },
  {
    nom: 'Cas Complexe',
    icone: <Star className="h-3 w-3 inline ml-1" />,
    couleur: 'bg-emerald-600',
    couleurCellule: 'bg-emerald-50 border-emerald-300',
    couleurTexte: 'text-emerald-800',
    obligatoire: false
  },
  {
    nom: '√âcueil Expert',
    icone: <AlertTriangle className="h-3 w-3 inline ml-1" />,
    couleur: 'bg-red-600',
    couleurCellule: 'bg-red-50 border-red-300',
    couleurTexte: 'text-red-800 font-semibold',
    obligatoire: false
  },
  {
    nom: 'Technique Avanc√©e',
    icone: <Lightbulb className="h-3 w-3 inline ml-1" />,
    couleur: 'bg-amber-600',
    couleurCellule: 'bg-amber-50 border-amber-300',
    couleurTexte: 'text-amber-800 font-medium italic',
    obligatoire: false
  },
  {
    nom: 'Distinction Fine',
    icone: <Eye className="h-3 w-3 inline ml-1" />,
    couleur: 'bg-purple-600',
    couleurCellule: 'bg-purple-50 border-purple-300',
    couleurTexte: 'text-purple-800 font-medium',
    obligatoire: false
  },
  {
    nom: 'Ma√Ætrise Technique',
    icone: <Zap className="h-3 w-3 inline ml-1" />,
    couleur: 'bg-teal-600',
    couleurCellule: 'bg-teal-50 border-teal-300',
    couleurTexte: 'text-teal-800 font-semibold',
    obligatoire: false
  },
  {
    nom: 'Excellence Requise',
    icone: <Shield className="h-3 w-3 inline ml-1" />,
    couleur: 'bg-slate-600',
    couleurCellule: 'bg-slate-50 border-slate-300',
    couleurTexte: 'text-slate-800 font-bold',
    obligatoire: false
  }
];

// Fonction pour d√©terminer les colonnes utiles selon le contenu expert
function determinerColonnesUtilesB(lignes: string[][]): any[] {
  const colonnesUtiles = [];
  
  for (let colIndex = 0; colIndex < COLONNES_CONFIG_B.length; colIndex++) {
    const config = COLONNES_CONFIG_B[colIndex];
    
    // Toujours inclure les colonnes obligatoires
    if (config.obligatoire) {
      colonnesUtiles.push(config);
      continue;
    }
    
    // Pour les autres colonnes, v√©rifier s'il y a du contenu expert pertinent
    const aContenuExpertPertinent = lignes.some(ligne => {
      const cellule = ligne[colIndex];
      return cellule && 
             cellule.trim() !== '' && 
             !cellule.includes('√† d√©finir') &&
             !cellule.includes('√† d√©velopper') &&
             !cellule.includes('niveau expert') &&
             !cellule.includes('avanc√© √†') &&
             cellule.length > 25; // Contenu plus substantiel pour le niveau expert
    });
    
    if (aContenuExpertPertinent) {
      colonnesUtiles.push(config);
    }
  }
  
  return colonnesUtiles;
}

// Fonction pour g√©n√©rer les lignes expertes de mani√®re intelligente
function generateLignesRangBIntelligent(data: any): string[][] {
  const lignesBase = data.lignes || [];
  
  // Concepts m√©dicaux avanc√©s avec contenu expert cibl√©
  const conceptsRangB = [
    {
      concept: "Analyse D√©cisionnelle Multi-crit√®res",
      analyse: "M√©thode structur√©e d'aide √† la d√©cision m√©dicale int√©grant les dimensions clinique, √©thique, √©conomique et organisationnelle dans un processus formalis√©",
      cas: "Choix th√©rapeutique complexe chez un patient √¢g√© polymorbide : pond√©rer efficacit√© th√©rapeutique, qualit√© de vie, co√ªts et pr√©f√©rences familiales",
      ecueil: "√âviter la paralysie d√©cisionnelle par exc√®s d'analyse - garder le pragmatisme clinique",
      technique: "Matrice d√©cisionnelle pond√©r√©e : crit√®res √ó poids √ó scores = aide objective au choix",
      distinction: "D√©cision partag√©e ‚â† Analyse multi-crit√®res : l'une est relationnelle, l'autre est m√©thodologique",
      maitrise: "Savoir construire et utiliser des grilles d'aide √† la d√©cision adapt√©es au contexte clinique",
      excellence: "Int√©gration harmonieuse de l'analyse formelle et de l'intuition clinique experte"
    },
    {
      concept: "R√©gulation Avanc√©e des Pratiques",
      analyse: "Ensemble des m√©canismes institutionnels et professionnels visant √† optimiser la qualit√©, la s√©curit√© et l'efficience des soins par l'autor√©gulation et l'√©valuation continue",
      cas: "Mise en place d'un syst√®me de revue de morbi-mortalit√© (RMM) pluridisciplinaire avec analyse des √©v√©nements ind√©sirables",
      ecueil: "Ne pas transformer la r√©gulation en contr√¥le punitif - privil√©gier l'am√©lioration continue",
      technique: "Cycle PDCA m√©dical : Plan-Do-Check-Act adapt√© aux sp√©cificit√©s de la pratique clinique",
      distinction: "Autor√©gulation professionnelle vs R√©gulation externe : logiques compl√©mentaires mais distinctes",
      maitrise: "Ma√Ætriser les outils d'√©valuation des pratiques et d'am√©lioration continue de la qualit√©",
      excellence: "Leadership professionnel dans la promotion d'une culture s√©curit√© et qualit√©"
    },
    {
      concept: "√âthique Proc√©durale Complexe",
      analyse: "Application des principes √©thiques dans les situations complexes n√©cessitant une approche proc√©durale formalis√©e, notamment en cas de conflits de valeurs ou d'int√©r√™ts multiples",
      cas: "Conflit √©thique en r√©animation : d√©saccord famille-√©quipe sur limitation des th√©rapeutiques actives n√©cessitant m√©diation √©thique",
      ecueil: "√âviter le formalisme excessif qui paralyse la d√©cision clinique urgente",
      technique: "Grille d'analyse √©thique structur√©e : identification des enjeux, des parties prenantes, des options et de leurs cons√©quences",
      distinction: "√âthique de situation vs √âthique proc√©durale : adaptation contextuelle vs cadre m√©thodologique",
      maitrise: "Savoir mener une consultation d'√©thique clinique et animer une r√©flexion √©thique pluridisciplinaire",
      excellence: "Facilitation experte des processus de r√©solution des dilemmes √©thiques complexes"
    }
  ];

  // G√©n√©rer les lignes √† partir des concepts experts avec contenu intelligent
  const lignes: string[][] = [];
  
  conceptsRangB.forEach(concept => {
    const ligne = [
      concept.concept,
      concept.analyse,
      concept.cas || '',
      concept.ecueil || '',
      concept.technique || '',
      concept.distinction || '',
      concept.maitrise || '',
      concept.excellence || ''
    ];
    
    lignes.push(ligne);
  });

  // Compl√©ter avec les donn√©es originales si elles apportent de la valeur experte
  if (lignesBase.length > 0) {
    lignesBase.forEach((ligne: string[]) => {
      const ligneComplete = [
        ligne[0] || '',
        ligne[1] || '',
        ligne[2] || '',
        getEcueilExpert(ligne[0] || ''),
        getTechniqueAvancee(ligne[0] || ''),
        getDistinctionFine(ligne[0] || ''),
        getMaitriseExpertise(ligne[0] || ''),
        getExcellenceRequise(ligne[0] || '')
      ];
      
      // V√©rifier si la ligne apporte de la valeur experte
      const aContenuExpert = ligneComplete.some((cellule, index) => {
        if (index < 2) return true; // Toujours garder concept et analyse
        return cellule && cellule.length > 25 && !cellule.includes('niveau expert');
      });
      
      if (aContenuExpert) {
        lignes.push(ligneComplete);
      }
    });
  }

  return lignes;
}

// Fonctions utilitaires intelligentes pour le niveau expert
function getEcueilExpert(concept: string): string {
  const ecueilsExperts = {
    'analyse d√©cisionnelle': '√âviter la paralysie d√©cisionnelle par exc√®s d\'analyse formelle',
    'r√©gulation des pratiques': 'Ne pas transformer la r√©gulation en contr√¥le punitif',
    '√©thique proc√©durale': '√âviter le formalisme excessif qui paralyse la d√©cision clinique',
    'supports au raisonnement': 'Ne pas substituer l\'outil au raisonnement clinique expert'
  };
  
  const key = concept.toLowerCase();
  for (const [k, v] of Object.entries(ecueilsExperts)) {
    if (key.includes(k)) return v;
  }
  return '';
}

function getTechniqueAvancee(concept: string): string {
  const techniquesAvancees = {
    'analyse d√©cisionnelle': 'Matrice d√©cisionnelle pond√©r√©e : crit√®res √ó poids √ó scores = aide objective',
    'r√©gulation des pratiques': 'Cycle PDCA m√©dical : Plan-Do-Check-Act adapt√© √† la pratique clinique',
    '√©thique proc√©durale': 'Grille d\'analyse √©thique : enjeux ‚Üí parties ‚Üí options ‚Üí cons√©quences'
  };
  
  const key = concept.toLowerCase();
  for (const [k, v] of Object.entries(techniquesAvancees)) {
    if (key.includes(k)) return v;
  }
  return '';
}

function getDistinctionFine(concept: string): string {
  const distinctionsFines = {
    'analyse d√©cisionnelle': 'D√©cision partag√©e ‚â† Analyse multi-crit√®res : relationnelle vs m√©thodologique',
    'r√©gulation des pratiques': 'Autor√©gulation vs R√©gulation externe : logiques compl√©mentaires distinctes',
    '√©thique proc√©durale': '√âthique de situation vs √âthique proc√©durale : contextuelle vs m√©thodologique'
  };
  
  const key = concept.toLowerCase();
  for (const [k, v] of Object.entries(distinctionsFines)) {
    if (key.includes(k)) return v;
  }
  return '';
}

function getMaitriseExpertise(concept: string): string {
  const maitrises = {
    'analyse d√©cisionnelle': 'Savoir construire et utiliser des grilles d\'aide √† la d√©cision adapt√©es',
    'r√©gulation des pratiques': 'Ma√Ætriser les outils d\'√©valuation et d\'am√©lioration continue de la qualit√©',
    '√©thique proc√©durale': 'Savoir mener une consultation d\'√©thique et animer la r√©flexion pluridisciplinaire'
  };
  
  const key = concept.toLowerCase();
  for (const [k, v] of Object.entries(maitrises)) {
    if (key.includes(k)) return v;
  }
  return '';
}

function getExcellenceRequise(concept: string): string {
  const excellences = {
    'analyse d√©cisionnelle': 'Int√©gration harmonieuse de l\'analyse formelle et de l\'intuition clinique',
    'r√©gulation des pratiques': 'Leadership professionnel dans la promotion d\'une culture s√©curit√©-qualit√©',
    '√©thique proc√©durale': 'Facilitation experte des processus de r√©solution des dilemmes complexes'
  };
  
  const key = concept.toLowerCase();
  for (const [k, v] of Object.entries(excellences)) {
    if (key.includes(k)) return v;
  }
  return '';
}
